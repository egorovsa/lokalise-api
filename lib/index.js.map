{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/services/request.ts","webpack:///./src/api/strings.ts","webpack:///external \"fs\"","webpack:///external \"https\"","webpack:///external \"path\"","webpack:///external \"os\"","webpack:///external \"extract-zip\"","webpack:///./src/api/projects.ts","webpack:///external \"superagent\"","webpack:///external \"request\"","webpack:///./src/api/languages.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","request","superagent","Request","token","this","arrayPropsToJson","data","typesArray","key","indexOf","JSON","stringify","url","_this","Promise","resolve","reject","query","__assign","api_token","end","err","res","body","post","formData","parse","Strings","_super","__extends","add","params","list","remove","require","request_1","extract","os","path","http","fs","Projects","createSnapshot","id","title","empty","export","exportToPath","filesPath","tmpDir","tmpdir","exportData","_a","sent","response","code","tempFilePath_1","file_1","createWriteStream","bundle","full_file","pipe","on","dir","console","error","message","import","file","createReadStream","uploadScreenShot","Languages","listSystemLanguages","setProperties","languages_1","projects_1","strings_1","LokaliseAPI","projects","languages","strings"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","import * as request from 'request';\nimport * as superagent from 'superagent';\n\nconst LOKALISE_API_URL = 'https://api.lokalise.co/api/';\n\nexport interface LokaliseResponse {\n    code: string;\n    message: string;\n    status: string;\n}\n\nexport interface DefaultResponse {\n    response: LokaliseResponse;\n}\n\nexport class Request {\n    constructor(readonly token: string) {\n    }\n\n    protected arrayPropsToJson<T extends { [key: string]: any }>(data: T): T {\n        const typesArray: string[] = [\n            'langs',\n            'filter',\n            'include_pids',\n            'include_tags',\n            'exclude_tags',\n            'tags',\n            'key_ids',\n            'iso',\n            'keys',\n            'data'\n        ];\n\n        for (const key in data) {\n            if (typesArray.indexOf(key) > -1) {\n                data[key] = JSON.stringify(data[key]);\n            }\n        }\n\n        return data;\n    }\n\n    protected get<T, U>(url: string, data?: U): Promise<T> {\n        return new Promise<T>(\n            (resolve: (res: any) => void, reject: (res: any) => void): void => {\n                superagent.get(LOKALISE_API_URL + url)\n                    .query({...{api_token: this.token}, ...data as {}})\n                    .end((err, res) => {\n                        if (!err) {\n                            resolve(res.body);\n                        } else {\n                            reject(res);\n                        }\n                    });\n            }\n        );\n    }\n\n    protected post<T, U>(url: string, data?: U): Promise<T> {\n        data = this.arrayPropsToJson<U>(data);\n\n        return new Promise<T>(\n            (resolve: (res: any) => void, reject: (res: any) => void): void => {\n                request.post(\n                    {\n                        url: LOKALISE_API_URL + url,\n                        formData: {...{api_token: this.token}, ...data as {}}\n                    },\n                    (err: any, res: request.Response, body: string) => {\n                        if (!err) {\n                            resolve(JSON.parse(body));\n                        } else {\n                            reject(res);\n                        }\n                    }\n                );\n            }\n        );\n    }\n}\n","import { DefaultResponse, LokaliseResponse, Request } from '../services/request';\nimport { PlaceholderFormat, PlatformBitMask, PluralFormat } from '..';\n\nexport interface LocaleKey {\n    context: string;\n    created_at: string;\n    fuzzy: string;\n    is_archived: string;\n    is_hidden: string;\n    key: string;\n    modified_at: string;\n    platform_mask: PlatformBitMask;\n    plural_key: string;\n    tags?: string[];\n    translation: string;\n}\n\nexport interface LocaleKeyAppend extends LocaleKey {\n    filename_web: string;\n    hidden: number;\n    plural: string;\n    translations: { [locale: string]: string };\n}\n\nexport interface StringsList {\n    response: LokaliseResponse;\n    strings: { [lang: string]: LocaleKey[] };\n}\n\nexport interface StringsListParams {\n    icu_numeric?: boolean;\n    id: string;\n    keys?: object[];\n    langs?: object[];\n    placeholder_format?: PlaceholderFormat;\n    platform_mask?: PlatformBitMask;\n    plural_format?: PluralFormat;\n    tags?: object[];\n}\n\nexport interface AddKeysParams {\n    data: LocaleKeyAppend[];\n    id: number;\n}\n\nexport interface AddKeysResponse {\n    response: LokaliseResponse;\n    result: {\n        inserted: string\n        updated: string\n    };\n}\n\nexport interface RemoveKeysParams {\n    id: number;\n    keys: string[];\n}\n\nexport class Strings extends Request {\n    constructor(token: string) {\n        super(token);\n    }\n\n    public async add(params: AddKeysParams): Promise<AddKeysResponse> {\n        return this.post<AddKeysResponse, AddKeysParams>('string/set', params);\n    }\n\n    public async list(params: StringsListParams): Promise<StringsList> {\n        return this.post<StringsList, StringsListParams>('string/list/', params);\n    }\n\n    public async remove(params: RemoveKeysParams): Promise<DefaultResponse> {\n        return this.post<DefaultResponse, RemoveKeysParams>('string/list/', params);\n    }\n}\n","module.exports = require(\"fs\");","module.exports = require(\"https\");","module.exports = require(\"path\");","module.exports = require(\"os\");","module.exports = require(\"extract-zip\");","import * as Stream from 'stream';\nimport { DefaultResponse, LokaliseResponse, Request } from '../services/request';\nimport { FileFormat, PlaceholderFormat, PluralFormat } from '..';\n\nconst extract = require('extract-zip');\nconst os = require('os');\nconst path = require('path');\nconst http = require('https');\nconst fs = require('fs');\n\nexport const enum ExportEmpty {\n    empty = 'empty',\n    base = 'base',\n    skip = 'skip'\n}\n\nexport const enum ExportSort {\n    first_added = 'first_added',\n    last_added = 'last_added',\n    last_updated = 'last_updated',\n    a_z = 'a_z',\n    z_a = 'z_a'\n}\n\nexport const enum JavaPropertiesEncoding {\n    utf8 = 'utf-8',\n    latin1 = 'latin-1'\n}\n\nexport interface ProjectsListObject {\n    created: string;\n    desc: string;\n    id: string;\n    name: string;\n    owner: string;\n}\n\nexport interface ProjectsList {\n    projects: ProjectsListObject[];\n    response: LokaliseResponse;\n}\n\nexport interface AddProjectParams {\n    base_lang?: string;\n    description?: string;\n    name: string;\n}\n\nexport interface AddProjectResponse {\n    project: {\n        id: number\n    };\n    response: LokaliseResponse;\n}\n\nexport interface ExportProjectParams {\n    bundle_structure?: string;\n    directory_prefix?: string;\n    export_all?: 0 | 1;\n    export_empty?: ExportEmpty;\n    export_sort?: ExportSort;\n    filter?: string[];\n    icu_numeric?: 0 | 1;\n    id: number;\n    include_comments?: 0 | 1;\n    include_pids?: string[];\n    include_tags?: string[];\n    java_properties_encoding?: JavaPropertiesEncoding;\n    java_properties_separator?: '=' | ':';\n    json_unescaped_slashes?: 0 | 1;\n    langs?: string[];\n    no_language_folders?: 0 | 1;\n    placeholder_format?: PlaceholderFormat;\n    plural_format?: PluralFormat;\n    replace_breaks?: 0 | 1;\n    triggers?: string[];\n    type: FileFormat;\n    use_original?: 0 | 1;\n    webhook_url?: string;\n    yaml_include_root?: 0 | 1;\n}\n\nexport interface ExportResponse {\n    bundle: {\n        file: string,\n        full_file: string\n    };\n    response: LokaliseResponse;\n}\n\nexport interface ImportData {\n    convert_placeholders?: 0 | 1;\n    distinguish?: 0 | 1;\n    file: FileFormat;\n    filename?: string;\n    fill_empty?: 0 | 1;\n    hidden?: 0 | 1;\n    icu_plurals?: 0 | 1;\n    id: string;\n    lang_iso: string;\n    replace?: 0 | 1;\n    replace_breaks?: 0 | 1;\n    tags?: string[];\n    use_trans_mem?: 0 | 1;\n}\n\nexport interface ProjectImportResponse {\n    response: LokaliseResponse;\n    result: {\n        inserted: number;\n        skipped: number;\n        updated: number;\n    };\n}\n\nexport interface UploadScreenshot {\n    autotag: 0 | 1;\n    id: string;\n    key_ids: string[];\n    screenshot: string;\n}\n\nexport class Projects extends Request {\n    constructor(token: string) {\n        super(token);\n    }\n\n    public async add(data: AddProjectParams): Promise<AddProjectResponse> {\n        return this.post<AddProjectResponse, AddProjectParams>('project/add', data);\n    }\n\n    public async createSnapshot(id: string, title: string): Promise<DefaultResponse> {\n        return this.post<DefaultResponse, object>('project/export', {\n            id,\n            title\n        });\n    }\n\n    public async empty(id: string): Promise<DefaultResponse> {\n        return this.post<DefaultResponse, object>('project/export', {\n            id\n        });\n    }\n\n    public async export(data: ExportProjectParams): Promise<ExportResponse> {\n        return this.post<ExportResponse, ExportProjectParams>('project/export', data);\n    }\n\n    public async exportToPath(filesPath: string, data: ExportProjectParams): Promise<ExportResponse> {\n        const tmpDir = os.tmpdir();\n        const exportData: ExportResponse = await this.export(data);\n\n        return new Promise<ExportResponse>(\n            (\n                resolve: (data: ExportResponse) => void,\n                reject: (data: LokaliseResponse) => void\n            ): void => {\n                if (exportData.response.code === '200') {\n                    const tempFilePath = path.resolve(tmpDir, data.id + '.zip');\n                    const file = fs.createWriteStream(tempFilePath);\n\n                    http.get(exportData.bundle.full_file, (res: Stream) => {\n                        res.pipe(file);\n\n                        res.on('end', () => {\n                            extract(tempFilePath, {dir: path.resolve(filesPath)}, () => {\n                                resolve(exportData);\n                            });\n                        });\n                    });\n                } else {\n                    /* tslint:disable:no-console */\n                    console.error(`Export error:  ${exportData.response.code} - ${exportData.response.message}`);\n                    /* tslint:enable*/\n                    reject(exportData.response);\n                }\n            });\n    }\n\n    public async import(data: ImportData): Promise<ProjectImportResponse> {\n        data.file = fs.createReadStream(path.resolve(data.file));\n\n        return this.post<ProjectImportResponse, ImportData>('project/import', data);\n    }\n\n    public async list(): Promise<ProjectsList> {\n        return this.get<ProjectsList, object>('project/list');\n    }\n\n    public async remove(id: string): Promise<DefaultResponse> {\n        return this.post<DefaultResponse, object>('project/remove', {id});\n    }\n\n    public async uploadScreenShot(data: UploadScreenshot): Promise<DefaultResponse> {\n        return this.post<DefaultResponse, UploadScreenshot>('project/screenshot', data);\n    }\n}\n","module.exports = require(\"superagent\");","module.exports = require(\"request\");","import { DefaultResponse, Request } from '../services/request';\n\nexport interface Language {\n    iso: string;\n    name: string;\n    rtl: string;\n}\n\nexport interface ProjectLanguage extends Language {\n    is_default: string;\n    words: string;\n}\n\nexport interface SystemLanguagesResponse {\n    languages: Language[];\n    response: DefaultResponse;\n}\n\nexport interface ProjectLanguagesList {\n    languages: ProjectLanguage[];\n    response: DefaultResponse;\n}\n\nexport interface AddRemoveLanguagesParams {\n    id: string;\n    iso: string[];\n}\n\nexport interface SetLanguagesParams {\n    custom_iso?: string;\n    custom_name?: string;\n    id: string;\n    original_iso: string;\n}\n\nexport class Languages extends Request {\n    constructor(token: string) {\n        super(token);\n    }\n\n    public async add(data: AddRemoveLanguagesParams): Promise<DefaultResponse> {\n        return this.post<DefaultResponse, AddRemoveLanguagesParams>('language/add', data);\n    }\n\n    public async list(id: string): Promise<ProjectLanguagesList> {\n        return this.get<ProjectLanguagesList, object>('language/list', {\n            id\n        });\n    }\n\n    public async listSystemLanguages(): Promise<SystemLanguagesResponse> {\n        return this.get<SystemLanguagesResponse, object>('language/listall');\n    }\n\n    public async remove(data: AddRemoveLanguagesParams): Promise<DefaultResponse> {\n        return this.post<DefaultResponse, AddRemoveLanguagesParams>('language/remove', data);\n    }\n\n    public async setProperties(data: SetLanguagesParams): Promise<DefaultResponse> {\n        return this.post<DefaultResponse, SetLanguagesParams>('language/add', data);\n    }\n}\n","import { Languages } from './api/languages';\nimport { Projects } from './api/projects';\nimport { Strings } from './api/strings';\n\nexport const enum PluralFormat {\n    generic = 'generic',\n    json_string = 'json_string',\n    icu = 'icu',\n    array = 'array',\n    i18next = 'i18next',\n    symfony = 'symfony',\n}\n\nexport const enum PlaceholderFormat {\n    i18n = 'i18n',\n    printf = 'printf',\n    ios = 'ios',\n    icu = 'icu',\n    net = 'net',\n    symfony = 'symfony'\n}\n\nexport const enum FileFormat {\n    android_sdk = 'android_sdk',\n    ios_sdk = 'ios_sdk',\n    xml = 'xml',\n    strings = 'strings',\n    csv = 'csv',\n    xlsx = 'xlsx',\n    po = 'po',\n    properties = 'properties',\n    json = 'json',\n    xliff = 'xliff',\n    plist = 'plist',\n    resx = 'resx',\n    js = 'js',\n    react_native = 'react_native',\n    symfony_xliff = 'symfony_xliff',\n    xlf = 'xlf',\n    php = 'php',\n    ini = 'ini',\n    ruby_yaml = 'ruby_yaml',\n    yaml = 'yaml',\n    stf = 'stf',\n    ts = 'ts'\n}\n\nexport const enum PlatformBitMask {\n    IOS = 1,\n    Android = 2,\n    Web = 4,\n    Other = 16\n}\n\nexport class LokaliseAPI {\n    public languages: Languages;\n    public projects: Projects;\n    public strings: Strings;\n\n    constructor(token: string) {\n        this.projects = new Projects(token);\n        this.languages = new Languages(token);\n        this.strings = new Strings(token);\n    }\n}\n"],"sourceRoot":""}